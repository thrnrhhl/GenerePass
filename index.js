function App() {
  const [value, setValue] = React.useState("");
  const [filter, setFilter] = React.useState([false, false, false]);
  const [generePass, setGenerePass] = React.useState([]);
  const userLang = navigator.language || navigator.userLanguage === "ru" ? "ru" : "en";
  
  const textLanguage = {
    ru: [
      [
        "Сохраненные пароли",
        "Наименование",
        "Пароль",
        "Копировать",
        ["Ваши", "сохраненные пароли", "будут показаны здесь"],
        "Сохранить",
        "Отменить",
        "Наименование",
      ],
      ["Сохраненные пароли", "Скачать пароли"],
      ["Цифры", "Буквы", "Символы", "Длина пароля"],
      [
        "Привет, это генератор паролей. Для того, чтобы ввести длину пароля, просто нажмите клавиши 'Цифры'(0-9), и когда вы введете оптимальную длину, нажмите 'Ввод', и пароль будет сгенерирован сам по себе.",
        "Чтобы скопировать пароль, нажмите на блок с паролем, который вам больше всего подходит, и если вы хотите сохранить пароль, то нажмите на звездочку (это слева от пароля) и вверху окна появится блок с вводом, вам нужно ввести туда имя для пароля, чтобы в будущем вы не забыли, от чего этот пароль был",
      ],
      [
        "Пароль скопирован в буфер обмена",
        "Пароль успешно сохранен",
        "Максимальная длина пароля 1000",
        "Выберите фильтры",
      ],
    ],
    en: [
      [
        "Saved passwords",
        "Name",
        "Pass",
        "Copy",
        ["Your", "saved passwords", "will be shown here"],
        "Save",
        "Cancel",
        "Name",
      ],
      ["Saved passwords", "Download passwords"],
      ["Numbers", "Letters", "Symbols", "Password length"],
      [
        "Hi, this is a password generator. In order to enter the password length, just press the 'Numbers' keys and when you enter the optimal length, press 'Enter' and the password will be generated by itself.",
        "To copy the password, click on the block with the password that suits you the most, and if you want to save the password, but click on the asterisk (this is to the left of the password) and a block with the input will appear on top of the window, you need to enter the name for the password there so that in the future you do not forget what this password was from"
      ],
      [
        "The password has been copied to the clipboard",
        "Password saved successfully",
        "The maximum password length is 1000",
        "Select filters",
      ],
    ],
  };
  const [language, setLanguage] = React.useState(textLanguage[userLang]);
  const [message, setMessage] = React.useState(language[4][0]);
  const [mesStatus, setMesStatus] = React.useState(0);
  const [prePass, setPrePass] = React.useState();
  const [preName, setPreName] = React.useState();
  const [data, setData] = React.useState([]);
  const messageRef = React.createRef();
  const saveRef = React.createRef();
  const modal = React.createRef();
  const symbols = {
    0: "0123456789",
    1: "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz",
    2: "§±!@#$%^&*()_+[]{};:''|/?><,.",
  };
  const SETTINGS = {
    idb: "GenerePass",
    version: 1,
    store: "g3n",
    keypath: "name",
  };

  document.addEventListener("keydown", (event) => {
    const even = (bool) => {
      return bool === true;
    };
    if (event.keyCode === 13) {
      if (filter.some(even) === true && value !== "") {
        generate();
      } else {
        console.log(value)
        setMessage(textLanguage[userLang][4][3]);
        setMesStatus(1);
        setTimeout(() => setMesStatus(0), 1000);
      }
    } else if (event.keyCode === 8) {
      setValue(value.slice(0, -1));
    } else if (
      (event.keyCode >= 48 && event.keyCode <= 57) ||
      (event.keyCode >= 96 && event.keyCode <= 105)
    ) {
      
      value.length <= 3 ? setValue(value + event.key) : null;
    }
  });

  document.addEventListener("click", (event) => {
    if (event.target === modal.current) {
      modal.current.close();
    }
  });

  const handleClickFilter = (id) => {
    let array = filter;
    filter[id - 1] = !filter[id - 1];
    setFilter([...array]);
  };
  const handlyCopy = (text) => {
    navigator.clipboard.writeText(text);
    setMessage(textLanguage[userLang][4][0]);
    setMesStatus(1);
    setTimeout(() => setMesStatus(0), 1000);
  };
  const handlePrePass = (pass) => {
    setPrePass(pass);
    setMessage(textLanguage[userLang][4][1]);
    saveRef.current.style.display = "block";
  };

  const handleSave = (type) => {
    if (type === "save") {
      saveRef.current.style.display = "none";
      IndexedDB({
        settings: SETTINGS,
        type: "readwrite",
        item: [{ name: preName, password: prePass }],
        callback: {
          success: (e) => {
            if (e === "done") {
              setMessage(textLanguage[userLang][4][1]);
              setMesStatus(1);
              setTimeout(() => setMesStatus(0), 1000);
            }
          },
        },
      });
    } else {
      saveRef.current.style.display = "none";
    }
  };
  const handleShowModal = () => {
    IndexedDB({
      settings: SETTINGS,
      type: "readAll",
      callback: {
        readArray: (e) => setData(e),
      },
    });
    modal.current.showModal();
  };

  const handleDownload = () => {
    IndexedDB({
      settings: SETTINGS,
      type: "readAll",
      callback: {
        readArray: (e) => {
          let str = "";
          e.map((key) => {
            str += `Name: ${key.name} \nPassword: ${key.password}\n------------- \n`;
          });
          let blob = new Blob([str], { type: "text/plain" });
          let link = document.createElement("a");
          link.href = URL.createObjectURL(blob);
          link.download = "GenerePass_" + Date.now() + ".txt";
          link.click();
        },
      },
    });
  };

  const generate = () => {
    let symb = "";
    let str = "";
    let array = [];
    filter.map((key, index) =>
      key === true ? (symb += symbols[index]) : null
    );
    for (let i = 0; i < 5; i++) {
      str = "";
      for (let j = 0; j < Number(value); j++) {
        str += symb.charAt(Math.floor(Math.random() * symb.length));
      }
      array.push(str);
    }
    setGenerePass(array);
  };

  const generePassDiv = generePass.map((key, index) => {
    return (
      <>
        <div className={"app-password__item"} key={index}>
          <div
            className={"app-password__item-pass"}
            key={index}
            onClick={handlyCopy.bind(this, key)}
          >
            {key}
          </div>
          <div
            className={"app-password__item-star"}
            onClick={handlePrePass.bind(this, key)}
          ></div>
        </div>
      </>
    );
  });

  const divData = data.map((key, index) => {
    return (
      <div className={"pass-list__item"} key={index}>
        <div className={"pass-list__item-name"}>
          <span className={"pass-list__item-name__text"}>{language[0][1]}:</span>
          <span className={"pass-list__item-name__sname"}>{key.name}</span>
        </div>
        <div className={"pass-list__item-pass"}>
          <span className={"pass-list__item-pass__text"}>{language[0][2]}:</span>
          <button
            className={"pass-list__item-pass__button"}
            onClick={handlyCopy.bind(this, key.password)}
          >
            {language[0][3]}
          </button>
        </div>
      </div>
    );
  });

  return (
    <>
      <button className={"saving-button"} onClick={() => handleShowModal()}>
        {language[1][0]}
      </button>
      <button className={"saving-button"} onClick={() => handleDownload()}>
        {language[1][1]}
      </button>

      <dialog ref={modal} className={"modal"}>
        <div className={"modal-header"}></div>
        <div className={"modal-body"}>
          <div className={"pass-list"}>
            {divData.length === 0 ? (
              <h1 className={"pass-list__null"}>
                {language[0][4][0]} <span>{language[0][4][1]}</span>{" "}
                {language[0][4][2]}
              </h1>
            ) : (
              divData
            )}
          </div>
        </div>
      </dialog>
      <div
        className={"app-message"}
        ref={messageRef}
        style={mesStatus === 0 ? { display: "none" } : { display: "block" }}
      >
        {message}
      </div>
      <div
        className={"app-save-form"}
        ref={saveRef}
        style={{ display: "none" }}
      >
        <input
          type="text"
          placeholder={language[0][7]}
          onChange={(e) => setPreName(e.target.value)}
        />
        <button onClick={handleSave.bind(this, "save")}>
          {language[0][5]}
        </button>
        <button onClick={handleSave.bind(this, "cancel")}>
          {language[0][6]}
        </button>
      </div>
      <div className={"app"}>
        <div className={"app-saving-password"}></div>
        <div className={"app-header"}>
          <img src="logo.svg" width="130" />
        </div>
        <div className={"app-main"}>
          <div className={"app-main__row"}>
            <div
              className={
                filter[0] === true
                  ? "app-main__row-button active"
                  : "app-main__row-button"
              }
              onClick={() => handleClickFilter(1)}
            >
              <span
                className={"app-main__row-button__text"}
                style={userLang === "ru" ? { left: "-11px" } : null}
              >
                {language[2][0]}
              </span>
            </div>
            <div
              className={
                filter[1] === true
                  ? "app-main__row-button active"
                  : "app-main__row-button"
              }
              onClick={() => handleClickFilter(2)}
            >
              <span
                className={"app-main__row-button__text"}
                style={userLang === "ru" ? { left: "-3px" } : null}
              >
                {language[2][1]}
              </span>
            </div>
          </div>
          <div className={"app-main__row2"}>
            <div
              className={
                filter[2] === true
                  ? "app-main__row-button active"
                  : "app-main__row-button"
              }
              onClick={() => handleClickFilter(3)}
            >
              <span
                className={"app-main__row-button__text"}
                style={userLang === "ru" ? { left: "-25px" } : null}
              >
                {language[2][2]}
              </span>
            </div>
          </div>
        </div>
        <div className={"app-password"}>
          {generePassDiv}
          {generePassDiv.length === 0 ? (
            <div className={"app-password__text"}>
              <span className={"app-password__text-char"}>§ </span>
              {language[3][0]}
              <br />
              <br />
              {language[3][1]}
              <div className={"app-password__text-test"}>
                {language[2][3]}: <span>{value}</span>
              </div>
            </div>
          ) : (
            <div className={"app-password-input"}>
              {language[2][3]}: {value}
            </div>
          )}
        </div>
      </div>
    </>
  );
}

ReactDOM.render(<App />, document.getElementById("root"));
